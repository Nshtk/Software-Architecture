version: '3.2'

services:
  user_service:
    tty: true
    container_name: user_service
    volumes:
      - ./src:/opt/lab2/src
      - ./.vscode:/opt/lab2/.vscode
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres_db
      - DB_PORT=5432
      - DB_LOGIN=service_admin
      - DB_PASSWORD=123456789
      - DB_DATABASE=sa-accommodation-service
      - MONGO_HOST=mongo_db
      - MONGO_PORT=27017
      - MONGO_DATABASE=sa-accommodation-service-mongo
    depends_on:
      postgres_db:
        condition: service_healthy
    ports:
      - 8085:8081
    networks:
      - accommodation_network

  accommodation_service:
    tty: true
    container_name: accommodation_service
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres_db   # container name
      - DB_PORT=5432
      - DB_LOGIN=service_admin
      - DB_PASSWORD=123456789
      - DB_DATABASE=sa-accommodation-service
      - MONGO_HOST=mongo_db
      - MONGO_PORT=27017
      - MONGO_DATABASE=sa-accommodation-service-mongo   # change names
    depends_on:
      postgres_db:
        condition: service_healthy
    ports:
      - 8086:8081
    networks:
      - accommodation_network

  postgres_db:
    container_name: postgres_db
    build:
      context: .
      dockerfile: db.Dockerfile
    environment:
      - POSTGRES_USER=service_admin
      - POSTGRES_PASSWORD=123456789
      - PGDATA=/data/postgres
      - POSTGRES_DB=sa-accommodation-service
    volumes:
      - postgresdb_data:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - accommodation_network

  mongo_db:
    image: mongo:5.0
    restart: on-failure
    networks:
      - accommodation_network
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    ports:
      - '27017:27017'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet

volumes:
  postgresdb_data:
  mongodb_data:

networks:
  accommodation_network:
    driver: "bridge"
    external: false