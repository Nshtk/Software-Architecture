version: '3.2'

services:
  gateway:
    tty: true
    container_name: gateway
    volumes:
      - ./Code:/opt/CourseWork/Code
      - ./.vscode:/opt/CourseWork/.vscode
    build:
      context: .
      dockerfile: ./gateway.Dockerfile
    environment:
      - DB_HOST=postgres_db
      - DB_PORT=5432
      - DB_LOGIN=service_admin
      - DB_PASSWORD=123456789
      - DB_DATABASE=sa-accommodation-service
      - MONGO_HOST=mongo_db
      - MONGO_PORT=27017
      - MONGO_DATABASE=sa-accommodation-service-mongo 
      - CACHE=cache:6379
      - USER_ADDRESS=http://user_service:8081
      - ACCOMMODATION_ADDRESS=http://accommodation_service:8081
      - ORDER_ADDRESS=http://order_service:8081
    ports:
      - 8083:8081
    networks:
      - accommodation_network
      
  user_service:
    tty: true
    container_name: user_service
    build:
      context: .
      dockerfile: ./user.Dockerfile
    environment:
      - DB_HOST=postgres_db   # container name
      - DB_PORT=5432
      - DB_LOGIN=service_admin
      - DB_PASSWORD=123456789
      - DB_DATABASE=sa-accommodation-service
      - MONGO_HOST=mongo_db
      - MONGO_PORT=27017
      - MONGO_DATABASE=sa-accommodation-service-mongo
      - CACHE=cache:6379
    depends_on:
      postgres_db:
        condition: service_healthy
    ports:
      - 8080:8081
    networks:
      - accommodation_network

  accommodation_service:
    tty: true
    container_name: accommodation_service
    build:
      context: .
      dockerfile: ./accommodation.Dockerfile
    environment:
      - DB_HOST=postgres_db
      - DB_PORT=5432
      - DB_LOGIN=service_admin
      - DB_PASSWORD=123456789
      - DB_DATABASE=sa-accommodation-service
      - MONGO_HOST=mongo_db
      - MONGO_PORT=27017
      - MONGO_DATABASE=sa-accommodation-service-mongo 
      - CACHE=cache:6379
    depends_on:
      postgres_db:
        condition: service_healthy
    ports:
      - 8081:8081
    networks:
      - accommodation_network

  order_service:
    tty: true
    container_name: order_service
    build:
      context: .
      dockerfile: ./order.Dockerfile
    environment:
      - DB_HOST=postgres_db
      - DB_PORT=5432
      - DB_LOGIN=service_admin
      - DB_PASSWORD=123456789
      - DB_DATABASE=sa-accommodation-service
      - MONGO_HOST=mongo_db
      - MONGO_PORT=27017
      - MONGO_DATABASE=sa-accommodation-service-mongo 
      - CACHE=cache:6379
    depends_on:
      postgres_db:
        condition: service_healthy
    ports:
      - 8082:8081
    networks:
      - accommodation_network

  postgres_db:
    container_name: postgres_db
    build:
      context: .
      dockerfile: ./postgres.Dockerfile
    environment:
      - POSTGRES_USER=service_admin
      - POSTGRES_PASSWORD=123456789
      - PGDATA=/data/postgres
      - POSTGRES_DB=sa-accommodation-service
    volumes:
      - postgresdb_data:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d sa-accommodation-service -U $$POSTGRES_USER" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - accommodation_network

  mongo_db:
    container_name: mongo_db
    build:
      context: .
      dockerfile: ./mongo.Dockerfile
    restart: on-failure
    networks:
      - accommodation_network
    volumes:
      - mongodb_data:/data/db
    ports:
      - '27017:27017'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet

  cache:
    container_name: cache
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning 
    networks:
      - accommodation_network
    volumes: 
      - cache_data:/data

volumes:
  postgresdb_data:
  cache_data:
  mongodb_data:

networks:
  accommodation_network:
    driver: "bridge"
    external: false