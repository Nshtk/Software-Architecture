openapi: '3.0.2'
info:
  version: '1.0'
  title: 'Course Work Services API'
  description: Software Architecture Accommodation service API
servers:
  - url: http://localhost:8080
    description: Web server
paths:
  /user/search:
    get:
      summary: User search by first name and last name
      parameters:
      - name: first_name
        description: Имя
        in: query
        required: true
        schema:
          type: string
      - name: last_name
        description: Фамилия
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The users found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        404:
          description: No users found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth:
    post:
      summary: User authentication
      responses:
        '200':
          description: User JWT token
          content:
            application/json:
              schema:
               type: string
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                type: string
  /register:
    post:
      summary: User registration
      parameters:
      - name: login
        description: User login
        in: query
        required: true
        schema:
          type: string
      - name: password
        description: User password
        in: query
        required: true
        schema:
          type: string
      - name: first_name
        description: User first name
        in: query
        required: true
        schema:
          type: string
      - name: last_name
        description: User last name
        in: query
        required: true
        schema:
          type: string
      - name: email
        description: user email
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Inserted user id
          content:
            application/json:
              schema:
                type: integer
        404:
          description: User registration error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user:
    get:
      summary: Get user
      parameters:
      - name: id
        description: User id
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/user_id'
      responses:
        '200':
          description: User found or all users if no id is provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    user_id:
      description: User id
      type: integer
    users:
      type: array
      items:
        $ref: '#/components/schemas/user'
    user:
      type: object
      required:
        - id
        - first_name
        - last_name
        - email
        - login
        - password
      properties:
        id:
          $ref: '#/components/schemas/user_id'
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        login:
          type: string
        password:
          type: string
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: Error message
          type: string
  securitySchemes:
      basicAuth:     
        type: http
        scheme: basic
security:
  - basicAuth: []
